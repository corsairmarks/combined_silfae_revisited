# this = country
flag_subspecies_type = {
	optimize_memory
	if = {
		limit = { last_created_species = { NOT = { is_exact_same_species = prev.owner_main_species } } }
		if = {
			limit = { last_created_species = { is_lithoid = yes } }
			set_country_flag = lithoid_subspecies
		}
		else = {
			set_country_flag = non_lithoid_subspecies
		}
	}
	if = {
		limit = {
			has_origin = origin_tree_of_life
			is_lithoid_empire = yes
		}
		set_country_flag = non_lithoid_subspecies
	}
}

# this = planet, capital
# from = species, founder
generate_eldar_system_start_deposits_and_blockers = {
	optimize_memory
	clear_deposits = yes
	# no blockers except special lithoid blockers, which don't reduce districts
	if = {
		limit = { owner = { is_lithoid_empire = yes } }
		if = {
			limit = { owner = { has_valid_civic = civic_hive_devouring_swarm } }
			while = {
				count = 2
				add_deposit = d_hibernating_lithoids
			}
		}
		else_if = {
			limit = { owner = { NOT = { has_origin = origin_lithoid } } }
			while = {
				count = 4
				add_deposit = d_hibernating_lithoids
			}
		}
		# yes this means terravores get 2 + 4 blockers; it's that way in the base game files
		if = {
			limit = { owner = { has_origin = origin_lithoid } }
			add_deposit = d_lithoid_crater
			add_modifier = { modifier = lithoid_crater }
			while = {
				count = 4
				add_deposit = d_buried_lithoids
			}
		}
	}

	# other origin-related deposits
	if = {
		limit = { owner = { has_origin = origin_tree_of_life } }
		add_deposit = d_tree_of_life_home
	}
	else_if = {
		limit = { owner = { has_origin = origin_machine } }
		add_deposit = d_machine_minerals
		if = {
			limit = { owner = { has_valid_civic = civic_machine_assimilator } }
			add_deposit = d_organic_slurry
		}
	}
	else_if = {
		limit = { owner = { has_origin = origin_life_seeded } }
		add_deposit = d_dust_caverns
		add_deposit = d_bubbling_swamp
		add_deposit = d_crystalline_caverns
	}
	else_if = {
		limit = { owner = { has_origin = origin_remnants } }
		while = {
			count = 5
			add_deposit = d_ruined_arcology_eldar_system
		}
	}
	else_if = {
		limit = { owner = { has_origin = origin_progenitor_hive } }
		add_deposit = d_progenitor
	}

	# craftworld gets special deposit that duplicates the habitat arcane replicator, but only if Federations DLC is available
	if = {
		limit = { has_federations_dlc = yes }
		add_deposit = d_arcane_replicator_eldar_system
	}

	if = {
		limit = { owner = { NOT = { has_origin = origin_machine } } }
		if = {
			limit = {
				owner = {
					is_machine_empire = yes
					NOR = {
						has_origin = origin_remnants
						has_valid_civic = civic_machine_servitor
					}
				}
			}
			add_deposit = d_metal_boneyard
			add_deposit = d_organic_landfill
		}
		else = {
			# 3 generator + 3 mining for all habitable planet classes
			if = {
				limit = {
					OR = {
						is_planet_class = pc_gaia
						is_pd_gaia = yes
					}
				}
				random_list = {
					50 = { add_deposit = d_frozen_gas_lake }
					50 = { add_deposit = d_searing_desert }
				}
				add_deposit = d_buzzing_plains
				random_list = {
					50 = { add_deposit = d_ore_rich_caverns }
					50 = { add_deposit = d_prosperous_mesa }
				}
				add_deposit = d_mineral_striations
			}
			else_if = {
				limit = { is_planet_class = pc_relic }
				add_deposit = d_central_spire
				add_deposit = d_ancient_reactor_pits_eldar_system
				add_deposit = d_relic_metal_boneyard
				while = {
					count = 3
					add_deposit = d_dense_ruins_eldar_system
				}
				add_deposit = d_massive_crevice_eldar_system
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_arid
						is_pd_arid = yes
					}
				}
				add_deposit = d_searing_desert
				add_deposit = d_arid_highlands
				add_deposit = d_ore_rich_caverns
				add_deposit = d_veiny_cliffs
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_desert
						is_pd_desert = yes
					}
				}
				add_deposit = d_searing_desert
				add_deposit = d_arid_highlands
				add_deposit = d_prosperous_mesa
				add_deposit = d_mineral_fields
				set_planet_flag = tasty_desert
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_savannah
						is_pd_savannah = yes
					}
				}
				add_deposit = d_searing_desert
				add_deposit = d_arid_highlands
				add_deposit = d_prosperous_mesa
				add_deposit = d_mineral_fields
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_continental
						is_pd_continental = yes
					}
				}
				add_deposit = d_rushing_waterfalls
				add_deposit = d_hot_springs
				add_deposit = d_prosperous_mesa
				add_deposit = d_veiny_cliffs
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_ocean
						is_pd_ocean = yes
					}
				}
				add_deposit = d_rushing_waterfalls
				add_deposit = d_hot_springs
				add_deposit = d_ore_rich_caverns
				add_deposit = d_mineral_fields
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_tropical
						is_pd_tropical = yes
					}
				}
				add_deposit = d_rushing_waterfalls
				add_deposit = d_hot_springs
				add_deposit = d_prosperous_mesa
				add_deposit = d_mineral_fields
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_alpine
						is_pd_alpine = yes
					}
				}
				add_deposit = d_frozen_gas_lake
				add_deposit = d_hot_springs
				add_deposit = d_ore_rich_caverns
				add_deposit = d_veiny_cliffs
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_arctic
						is_pd_alpine = yes
					}
				}
				add_deposit = d_frozen_gas_lake
				add_deposit = d_hot_springs
				add_deposit = d_ore_rich_caverns
				add_deposit = d_veiny_cliffs
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_tundra
						is_pd_tundra = yes
					}
				}
				add_deposit = d_frozen_gas_lake
				add_deposit = d_hot_springs
				add_deposit = d_ore_rich_caverns
				add_deposit = d_mineral_fields
			}
			else_if = {
				limit = {
					OR = {
						is_planet_class = pc_nuked
						is_pd_nuked = yes
					}
				}
				add_deposit = d_searing_desert
				add_deposit = d_hot_springs
				add_deposit = d_ore_rich_caverns
				add_deposit = d_veiny_cliffs
			}
		}
	}
}

# set up the buildings for the custom initializer
# this = planet, capital
# from = species, founder
generate_eldar_system_start_buildings_and_districts = {
	optimize_memory
	if = {
		limit = { owner = { is_machine_empire = yes } }
		add_building = building_machine_capital
		while = {
			count = 2
			add_district = district_nexus
		}
		add_building = building_machine_assembly_plant
		add_building = building_uplink_node
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_district = district_nexus
			add_building = building_organic_sanctuary
		}
		else = {
			epr_add_planet_appropriate_generator_district = yes
		}
	}
	else_if = {
		limit = { owner = { is_hive_empire = yes } }
		add_building = building_hive_capital
		while = {
			count = 2
			add_district = district_hive
		}
		if = { # This building is very useless for Devouring Swarm Necrophages
			limit = {
				owner = {
					NAND = {
						has_origin = origin_necrophage
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			if = {
				limit = { owner = { has_origin = origin_progenitor_hive } }
				add_building = building_offspring_nest
			}
			else = {
				add_building = building_spawning_pool
			}
		}
		if = {
			limit = { owner = { has_origin = origin_tree_of_life } }
			epr_add_planet_appropriate_farming_district = yes
		}
		else = {
			add_district = district_hive
		}
		add_building = building_hive_node
		if = {
			limit = {
				owner = {
					has_origin = origin_necrophage
					NOT = { has_valid_civic = civic_hive_devouring_swarm }
				}
			}
			add_building = building_necrophage_elevation_chamber
		}
	}
	else = {
		add_building = building_capital
		while = {
			count = 2
			add_district = district_city
		}
		if = {
			limit = { owner = { has_origin = origin_mechanists } }
			add_building = building_robot_assembly_plant
		}
		else_if = {
			limit = {
				owner = {
					has_origin = origin_necrophage
					NOT = { has_valid_civic = civic_fanatic_purifiers }
				}
			}
			add_building = building_necrophage_elevation_chamber
		}
		if = {
			limit = { owner = { has_valid_civic = civic_permanent_employment } }
			add_building = building_posthumous_employment_center
		}
		if = {
			limit = {
				# restriction match those on building_ranger_lodge
				NOR = {
					is_planet_class = pc_city
					is_planet_class = pc_hive
					is_planet_class = pc_machine
					is_planet_class = pc_relic
				}
				is_pd_arcology = no
				is_pd_hive_world = no
				is_pd_hive_arcology = no
				is_pd_machine = no
				is_pd_robot_arcology = no
				is_artificial = no
				owner = {
					has_valid_civic = civic_environmentalist
				}
			}
			add_building = building_ranger_lodge
			add_blocker = { type = d_big_nature_preserve_blocker }
		}
		if = {
			limit = {
				owner = {
					NOT = { has_origin = origin_clone_army }
					OR = {
						has_origin = origin_remnants
						AND = {
							is_lithoid_empire = yes
							OR = {
								NOR = {
									has_origin = origin_syncretic_evolution
									has_origin = origin_necrophage
								}
								has_country_flag = lithoid_subspecies
							}
						}
					}
				}
			}
			epr_add_planet_appropriate_generator_district = yes
		}
		else = {
			add_district = district_city
		}
		if = {
			limit = { owner = { is_spiritualist = yes } }
			if = {
				limit = { owner = { is_death_cult_empire = yes } }
				add_building = building_sacrificial_temple_1
			}
			else = {
				add_building = building_temple
			}
		}
		else ={
			add_building = building_bureaucratic_1
		}
		if = {
			limit = { owner = { has_origin = origin_clone_army } }
			add_building = building_clone_army_clone_vat
			add_building = building_clone_army_clone_vat
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					is_megacorp = no
				}
			}
			if = {
				limit = { owner = { is_death_cult_empire = yes } }
				add_building = building_sacrificial_temple_1
			}
			else = {
				add_building = building_temple
			}
		}
		else_if = {
			limit = { owner = { has_valid_civic = civic_pleasure_seekers } }
			add_building = building_holo_theatres
		}
		else_if = {
			limit = {
				owner = {
					NAND = {
						is_regular_empire = yes
						has_origin = origin_necrophage
					}
					NOT = { has_valid_civic = civic_permanent_employment }
				}
			}
			add_building = building_commercial_zone
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		epr_add_planet_appropriate_generator_district = yes
	}
	else_if = {
		limit = { owner = { has_origin = origin_clone_army } }
		add_district = district_city
	}
	else_if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_mechanists
					is_hive_empire = yes
				}
			}
		}
		epr_add_planet_appropriate_generator_district = yes
	}
	else_if = {
		limit = {
			OR = {
				is_planet_class = pc_ocean
				is_pd_planet_for_aqua_trait = yes
			}
			owner = { is_anglers_empire = yes }
		}
		epr_add_planet_appropriate_farming_district = yes
	}
	else = {
		add_district = district_industrial
	}
	add_district = district_industrial
	if = {
		limit = { owner = { has_origin = origin_machine } }
		while = {
			count = 2
			epr_add_planet_appropriate_generator_district = yes
		}
		epr_add_planet_appropriate_mining_district = yes
	}
	else = {
		if = {
			limit = { owner = { is_catalytic_empire = yes } }
			if = {
				limit = { owner = { is_machine_empire = yes } }
				add_district = district_nexus
			}
			else_if = {
				limit = { owner = { is_hive_empire = yes } }
				if = {
					limit = { owner = { has_origin = origin_tree_of_life } }
					epr_add_planet_appropriate_farming_district = yes
				}
				else = {
					add_district = district_hive
				}
			}
			else = {
				add_district = district_city
			}
			while = {
				count = 2
				add_building = building_hydroponics_farm
			}
		}
		else_if = {
			limit = { owner = { has_origin = origin_tree_of_life } }
			epr_add_planet_appropriate_farming_district = yes
		}
		else_if = {
			limit = {
				owner = {
					is_hive_empire = yes
					NOT = { has_origin = origin_necrophage }
				}
			}
			add_district = district_hive
		}
		else_if = {
			limit = { owner = { has_origin = origin_clone_army } }
			add_district = district_city
		}
		else_if = {
			limit = {
				OR = {
					is_planet_class = pc_ocean
					is_pd_planet_for_aqua_trait = yes
				}
				owner = { is_anglers_empire = yes }
			}
			epr_add_planet_appropriate_farming_district = yes
		}
		else = {
			epr_add_planet_appropriate_mining_district = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_ocean
					is_pd_planet_for_aqua_trait = yes
				}
				owner = {
					is_catalytic_empire = yes
					is_anglers_empire = yes
				}
			}
			epr_add_planet_appropriate_farming_district = yes
		}
		else = {
			epr_add_planet_appropriate_mining_district = yes
		}
		epr_add_planet_appropriate_generator_district = yes
	}
	if = {
		limit = { owner = { NOT = { has_origin = origin_remnants } } }
		if = {
			limit = { owner = { NOT = { has_valid_civic = civic_reanimated_armies } } }
			add_building = building_research_lab_1
		}
		else = {
			add_building = building_dread_encampment
			# Necromancers do not give engineering, so make sure there's some readily-accessible engineering
			orbit = {
				clear_deposits = yes
				add_deposit = d_engineering_6
				set_planet_flag = ignore_startup_effect
				set_planet_flag = starting_deposit
				set_planet_flag = starting_research_target
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
				is_catalytic_empire = no
				is_lithoid_empire = yes
				NOT = { has_country_flag = non_lithoid_subspecies }
			}
		}
		add_building = building_commercial_zone
	}
	else_if = {
		limit = {
			owner = {
				NAND = {
					is_catalytic_empire = yes
					has_origin = origin_clone_army
				}
				OR = {
					is_catalytic_empire = yes
					AND = {
						OR = {
							is_regular_empire = yes
							is_hive_empire = yes
						}
						OR = {
							is_lithoid_empire = no
							has_country_flag = non_lithoid_subspecies
						}
					}
					AND = {
						OR = {
							has_valid_civic = civic_machine_assimilator
							has_valid_civic = civic_machine_servitor
						}
						has_country_flag = non_lithoid_subspecies
					}
				}
			}
		}
		if = {
			limit = { owner = { is_anglers_empire = no } }
			add_building = building_hydroponics_farm
		}
		else = {
			add_building = building_aquaponics_farm
		}
		if = {
			limit = {
				owner = {
					is_catalytic_empire = no
					NOR = {
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
						has_origin = origin_tree_of_life
						has_origin = origin_necrophage
						has_origin = origin_mechanists
						AND = {
							has_origin = origin_syncretic_evolution
							has_country_flag = lithoid_subspecies
						}
					}
				}
			}
			if = {
				limit = { owner = { is_anglers_empire = no } }
				add_building = building_hydroponics_farm
			}
			else_if = {
				limit = { is_wet = yes }
				add_building = building_commercial_zone
			}
			else = {
				add_building = building_aquaponics_farm
			}
		}
	}
	# Give Idyllic Bloom a Gaiaseeder to start with if they have room
	if = {
		limit = {
			free_building_slots > 0
			owner = {
				OR = {
					has_valid_civic = civic_idyllic_bloom
					has_valid_civic = civic_hive_idyllic_bloom
				}
				NOT = { has_origin = origin_life_seeded }
			}
		}
		add_building = building_gaiaseeders_1
	}
	# Give Relentless Industrialists a Coordinated Fulfillment Center to start with if they have room
	if = {
		limit = {
			free_building_slots > 0
			owner = {
				is_relentless_industrialist_empire = yes
			}
		}
		add_building = building_coordinated_fulfillment_center_1
	}
}

# same as vanilla, but doesn't adjust planet size or add buildings/districts
# this = planet, capital
# from = species, founder
generate_eldar_system_start_pops = {
	optimize_memory
	set_variable = {
		which = total_starting_pops
		value = 0
	}
	set_variable = {
		which = secondary_species_pops
		value = 0
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		set_variable = {
			which = total_starting_pops
			value = 29
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_assimilator } }
			set_variable = {
				which = secondary_species_pops
				value = 10
			}
			last_created_species = {
				set_citizenship_type = {
					country = prev.owner
					type = citizenship_full_machine
				}
				set_living_standard = {
					country = prev.owner
					type = living_standard_hive_mind
				}
			}
		}
		else_if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			set_variable = {
				which = total_starting_pops
				value = 33
			}
			set_variable = {
				which = secondary_species_pops
				value = 5
			}
			last_created_species = {
				set_citizenship_type = {
					country = prev.owner
					type = citizenship_limited
				}
				set_living_standard = {
					country = prev.owner
					type = living_standard_organic_trophy
				}
			}
		}
	}
	else_if = {
		limit = { owner = { is_hive_empire = yes } }
		set_variable = {
			which = total_starting_pops
			value = 33
		}
	}
	else = {
		# regular empire/fallback
		set_variable = {
			which = total_starting_pops
			value = 28
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
				}
			}
		}
		last_created_species = {
			set_species_flag = syncretic_species@prev.owner
			if = {
				limit = { prev.owner = { has_origin = origin_syncretic_evolution } }
				set_citizenship_type = {
					country = prev.owner
					type = citizenship_slavery
				}
			}
		}
		if = {
			limit = {
				owner = {
					has_origin = origin_necrophage
					is_homicidal = yes
					is_gestalt = yes
				}
			}
			set_variable = {
				which = secondary_species_pops
				value = 6
			}
		}
		else_if = {
			limit = {
				owner = {
					has_origin = origin_necrophage
					is_gestalt = yes
				}
			}
			set_variable = {
				which = secondary_species_pops
				value = 9
			}
		}
		else = {
			set_variable = {
				which = secondary_species_pops
				value = 12
			}
		}
	}
	else_if = {
		limit = { owner = { has_origin = origin_mechanists } }
		owner = { create_built_robot_species = yes }
		set_variable = {
			which = secondary_species_pops
			value = 8
		}
	}
	if = {
		limit = {
			check_variable = {
				which = secondary_species_pops
				value > 0
			}
		}
		subtract_variable = {
			which = total_starting_pops
			value = secondary_species_pops
		}
		while = {
			count = secondary_species_pops
			create_pop = {
				species = last_created_species
				ethos = random
				effect = {
					if = {
						limit = { owner = { is_gestalt = yes } }
						clear_ethos = yes
					}
				}
			}
		}
		if = {
			limit = { owner = { has_origin = origin_mechanists } }
			every_owned_pop = {
				limit = {
					is_robotic_species = yes
				}
				if = {
					limit = { has_job = miner }
					modify_species = {
						species = this
						add_trait = trait_robot_power_drills
						add_trait = trait_robot_bulky
						add_trait = trait_robot_high_maintenance
						add_traits_at_start_of_list = yes
					}
				}
				else_if = {
					limit = {
						OR = {
							has_job = farmer
							has_job = angler
						}
					}
					modify_species = {
						species = this
						add_trait = trait_robot_harvesters
						add_trait = trait_robot_bulky
						add_trait = trait_robot_high_maintenance
						add_traits_at_start_of_list = yes
					}
				}
				else_if = {
					limit = { has_job = technician }
					modify_species = {
						species = this
						add_trait = trait_robot_superconductive
						add_trait = trait_robot_bulky
						add_trait = trait_robot_high_maintenance
						add_traits_at_start_of_list = yes
					}
				}
			}
		}
	}
	if = {
		limit = { # homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		change_variable = {
			which = total_starting_pops
			value = 2
		}
	}
	else_if = {
		limit = { owner = { has_origin = origin_default } }
		change_variable = {
			which = total_starting_pops
			value = 4
		}
		add_modifier = { modifier = mastery_of_nature }
	}
	while = {
		count = total_starting_pops
		create_pop = {
			species = owner_main_species
			ethos = random
		}
	}
	clear_variable = total_starting_pops
	clear_variable = secondary_species_pops
}

# this = planet, capital
# from = species, founder
generate_eldar_system_final_pass = {
	optimize_memory
	# origin-related modifiers
	if = {
		limit = { owner = { has_origin = origin_lithoid } }
		add_modifier = { modifier = lithoid_crater }
	}
	else_if = {
		limit = { owner = { has_origin = origin_lost_colony } }
		add_modifier = { modifier = colonial_spirit_mod }
	}
	else_if = {
		limit = { owner = { has_origin = origin_clone_army } }
		planet_event = {
			id = clones.10
			days = 1095
			random = 730
		}
	}
	else_if = {
		limit = { owner = { has_origin = origin_default } }
		if = {
			limit = { owner = { is_gestalt = no } }
			add_modifier = {
				modifier = prosp_uni_mod
				days = 7200
			}
		}
		else = {
			add_modifier = {
				modifier = prosp_uni_mod_gestalt
				days = 7200
			}
		}
		change_planet_size = 2
		epr_add_planet_appropriate_generator_district = yes
		epr_add_planet_appropriate_mining_district = yes
	}
	# species-specific deposits
	if = {
		limit = {
			NOR = {
				is_planet_class = pc_city
				is_planet_class = pc_relic
			}
			is_ringworld = no
			is_pd_arcology = no
			is_pd_hive_arcology = no
			is_pd_robot_arcology = no
			owner = { any_owned_pop = { has_trait = trait_exotic_metabolism } }
		}
		add_deposit = d_exotic_mountain
	}
}

# duplicates the base game's Shroud creation code - which is unfortuantely duplicated/near-duplicated multiple times but none of them in an reusable effect
# this = any
silfae_eldar_ensure_global_shroud_country = {
	optimize_memory
	if = {
		limit = { NOT = { exists = event_target:shroud_country } }
		create_country = {
			name = "NAME_Creatures_of_the_Shroud"
			type = shroud_spirits
			flag = {
				icon = {
					category = "special"
					file = "the_shroud.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors = {
					"dark_purple"
					"black"
					"null"
					"null"
				}
			}
			effect = { save_global_event_target_as = shroud_country }
		}
	}
}

# ensures the Shroud exists and that the scoped country (silently) has communications with it
# this = country
silfae_eldar_ensure_communications_global_shroud_country = {
	optimize_memory
	silfae_eldar_ensure_global_shroud_country = yes
	if = {
		limit = { NOT = { has_communications = event_target:shroud_country } }
		establish_communications_no_message = event_target:shroud_country
	}
}

# this = planet
epr_add_planet_appropriate_mining_district = {
	optimize_memory
	if = {
		limit = { epr_planet_uses_district_mining_uncapped = yes }
		add_district = district_mining_uncapped
	}
	else = {
		add_district = district_mining
	}
}

# this = planet
epr_add_planet_appropriate_generator_district = {
	optimize_memory
	if = {
		limit = { epr_planet_uses_district_srw_commercial = yes }
		add_district = district_srw_commercial
	}
	else_if = {
		limit = { epr_planet_uses_district_generator_uncapped = yes }
		add_district = district_generator_uncapped
	}
	else = {
		add_district = district_generator
	}
}

# this = planet
epr_add_planet_appropriate_farming_district = {
	optimize_memory
	if = {
		limit = { epr_planet_uses_district_farming_uncapped = yes }
		add_district = district_farming_uncapped
	}
	else = {
		add_district = district_farming
	}
}