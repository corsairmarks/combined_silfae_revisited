namespace = eldar_evt

# flag mod as active
event = {
	id = eldar_evt.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_global_flag = eldar_revisited_installed }
	}
	immediate = {
		set_global_flag = eldar_revisited_installed
	}
}

# triggered by empire_init_capital_planet
# ROOT = planet, capital
# FROM = species, founder
planet_event = {
	id = eldar_evt.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_planet_flag = is_silfae_eldar_craftworld
		solar_system = { has_star_flag = is_silfae_eye_of_terror }
	}
	immediate = {
		owner = {
			flag_subspecies_type = yes
			give_starting_resources_effect = yes
		}
		generate_eldar_system_start_deposits_and_blockers = yes
		generate_eldar_system_start_buildings_and_districts = yes
		generate_eldar_system_start_pops = yes
		generate_eldar_system_final_pass = yes
	}
}

# triggered by empire_init_add_technologies
country_event = {
	id = eldar_evt.2
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_country_flag = is_silfae_eldar
	}
	immediate = {
		give_technology = {
			tech = tech_psionic_theory
			message = no
		}
	}
}

# triggered by empire_init_add_technologies
country_event = {
	id = eldar_evt.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = capital_scope
		capital_scope = { has_planet_flag = is_silfae_eldar_craftworld }
	}
	immediate = {
		give_technology = {
			tech = tech_hydroponics
			message = no
		}
		give_technology = {
			tech = tech_housing_1
			message = no
		}
	}
}

# triggered by on_game_start_country
country_event = {
	id = eldar_evt.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_origin = origin_default
		exists = capital_scope
		capital_scope = { has_planet_flag = is_silfae_eldar_craftworld }
	}
	immediate = {
		capital_scope = { change_planet_size = -2 }
	}
}

# ensure that restoring/creating an ecu/machine/hive world on the craftworld retains the arcane replicator - for the original owner only
# triggered by on_game_start_country and the mega.201 override
# ROOT = planet
# FROM = country - unclear whether the current owner, or the country that initiated terraforming
planet_event = {
	id = eldar_evt.5
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = {
		has_owner = yes
		original_owner = yes
	}
	trigger = {
		has_planet_flag = is_silfae_eldar_craftworld
		OR = {
			is_planet_class = pc_city
			is_planet_class = pc_machine
			is_planet_class = pc_hive
		}
		NOR = {
			has_deposit = d_arcane_replicator_eldar_system
			has_deposit = d_arcane_replicator_eldar_system_gestalt
		}
	}
	immediate = {
		if = {
			limit = { owner = { country_uses_consumer_goods = yes } }
			add_deposit = d_arcane_replicator_eldar_system
		}
		else = {
			add_deposit = d_arcane_replicator_eldar_system_gestalt
		}
	}
}

planet_event = {
	id = eldar_evt.6
	mean_time_to_happen = {
		days = 600
		scaled_modifier = {
			scope = THIS
			add = -30
			calc = pop_count
		}
	}
	title = eldar_evt.6.title
	desc = eldar_evt.6.desc
	picture = GFX_evt_eldar_craftworld
	show_sound = event_ground_battle
	location = ROOT
	pre_triggers = {
		has_owner = yes
		has_ground_combat = no
	}
	trigger = {
		years_passed > 10
		has_planet_flag = is_silfae_eldar_craftworld
		solar_system = { has_star_flag = is_silfae_eye_of_terror }
		num_pops > 0
	}
	immediate = {
		owner = { silfae_eldar_ensure_communications_global_shroud_country = yes }
		set_variable = {
			which = years_passed_scaled_armies
			value = trigger:years_passed
		}
		divide_variable = {
			which = years_passed_scaled_armies
			value = 20
		}
		floor_variable = years_passed_scaled_armies
		change_variable = {
			which = years_passed_scaled_armies
			value = 1
		}
		while = {
			count = years_passed_scaled_armies
			random_list = {
				8 = {
					modifier = {
						factor = 0.5
						mid_game_years_passed > 0
					}
					modifier = {
						factor = 0.5
						end_game_years_passed > 0
					}
					create_army = {
						name = NAME_shroud_undead_army
						owner = event_target:shroud_country
						type = undead_army
					}
				}
				4 = {
					modifier = {
						factor = 0.5
						end_game_years_passed > 0
					}
					create_army = {
						name = NAME_shroud_mutant_army
						owner = event_target:shroud_country
						type = mutant_army
					}
				}
				2 = {
					modifier = {
						factor = 2
						end_game_years_passed > 0
					}
					create_army = {
						name = NAME_shroud_psionic_army
						owner = event_target:shroud_country
						type = psionic_army
					}
				}
				1 = {
					modifier = {
						factor = 0
						years_passed < 60
					}
					modifier = {
						factor = 2
						end_game_years_passed > 30
					}
					modifier = {
						factor = 2
						end_game_years_passed > 60
					}
					create_army = {
						name = NAME_shroud_xenomorph_army
						owner = event_target:shroud_country
						type = xenomorph_army
					}
				}
			}
		}
		multiply_variable = {
			which = years_passed_scaled_armies
			value = 3
		}
		change_variable = {
			which = years_passed_scaled_armies
			value = 10
		}
		set_variable = {
			which = available_devastation
			value = 100
		}
		floor_variable = available_devastation
		subtract_variable = {
			which = available_devastation
			value = trigger:planet_devastation
		}
		if = {
			limit = {
				check_variable = {
					which = years_passed_scaled_armies
					value > available_devastation
				}
			}
			set_variable = {
				which = years_passed_scaled_armies
				value = available_devastation
			}
		}
		add_planet_devastation = years_passed_scaled_armies
		clear_variable = years_passed_scaled_armies
		if = {
			limit = { mid_game_years_passed > 0 }
			set_variable = {
				which = midgame_years_passed_scaled_armies
				value = trigger:mid_game_years_passed
			}
			divide_variable = {
				which = midgame_years_passed_scaled_armies
				value = 30
			}
			floor_variable = midgame_years_passed_scaled_armies
			change_variable = {
				which = midgame_years_passed_scaled_armies
				value = 1
			}
			while = {
				count = midgame_years_passed_scaled_armies
				create_army = {
					name = NAME_shroud_shroud_army
					owner = event_target:shroud_country
					type = shroud_army
				}
			}
			clear_variable = midgame_years_passed_scaled_armies
		}
	}
	option = {
		name = BATTLESTATIONS
	}
}

system_event = {
	id = eldar_evt.7
	is_triggered_only = yes
	title = eldar_evt.7.title
	desc = eldar_evt.7.desc
	picture = GFX_evt_eldar_craftworld
	show_sound = event_space_battle
	location = ROOT
	immediate = {
		if = {
			limit = { has_owner = yes }
			owner = { silfae_eldar_ensure_communications_global_shroud_country = yes }
		}
		every_fleet_in_system = {
			owner = { silfae_eldar_ensure_communications_global_shroud_country = yes }
		}
		set_variable = {
			which = midgame_years_passed_scaled_entities
			value = trigger:mid_game_years_passed
		}
		divide_variable = {
			which = midgame_years_passed_scaled_entities
			value = 20
		}
		floor_variable = midgame_years_passed_scaled_entities
		change_variable = {
			which = midgame_years_passed_scaled_entities
			value = 1
		}
		create_fleet = {
			name = NAME_shroud_psionic_manifestations
			settings = {
				spawn_debris = no
				is_boss = yes
			}
			effect = {
				set_owner = event_target:shroud_country
				while = {
					count = PREV.midgame_years_passed_scaled_entities
					random_list = {
						4 = {
							create_ship = { # 30000
								name = NAME_shroud_lesser_psionic_entity
								design = NAME_Shroud_Avatar
							}
						}
						2 = {
							create_ship = { # 50000
								name = NAME_shroud_psionic_entity
								design = NAME_Shroud_Manifestation
							}
						}
						1 = {
							create_ship = { # 60000
								name = NAME_shroud_greater_psionic_entity
								design = NAME_Corrupted_Avatar
							}
						}
					}
				}
				set_location = {
					target = PREV.star
					distance = 300
					angle = random
				}
				set_fleet_stance = aggressive
				set_fleet_bombardment_stance = armageddon
				set_aggro_range_measure_from = return_point
				set_aggro_range = 3000
				set_formation_scale = 5
			}
		}
		clear_variable = midgame_years_passed_scaled_entities
	}
	option = {
		name = BATTLESTATIONS
	}
}

planet_event = {
	id = eldar_evt.8
	hide_window = yes
	mean_time_to_happen = {
		days = 600
		scaled_modifier = {
			scope = THIS
			add = -30
			calc = pop_count
		}
	}
	trigger = {
		mid_game_years_passed > 40
		has_planet_flag = is_silfae_eldar_craftworld
		solar_system = {
			has_star_flag = is_silfae_eye_of_terror
			NOT = {
				any_fleet_in_system = {
					OR = {
						is_in_combat = yes
						owner = { is_country_type = shroud_spirits }
					}
				}
			}
		}
	}
	immediate = {
		solar_system = {
			system_event = {
				id = eldar_evt.7
			}
		}
	}
}

# triggered by on_planet_defenders_lose
# ROOT = country, planet owner
# FROM = country, attack leader
# FROMFROM = planet
country_event = {
	id = eldar_evt.9
	is_triggered_only = yes
	title = eldar_evt.9.title
	desc = eldar_evt.9.desc
	picture = GFX_evt_burning_settlement
	show_sound = event_ghost_town
	trigger = {
		FROM = { is_country_type = shroud_spirits }
		FROMFROM = { has_planet_flag = is_silfae_eldar_craftworld }
	}
	immediate = {
		FROMFROM = {
			every_owned_pop = {
				set_pop_flag = event_purge
				unemploy_pop = yes
			}
		}
	}
	option = {
		name = TERRIBLE
	}
}

# triggerd by on_pop_purged, on_planet_zero_pops, and on_planet_zero_pops_ground_combat
# ROOT = planet
# FROM = country, doer of bad things (purge, bombard, collateral damager)
planet_event = {
	id = eldar_evt.10
	is_triggered_only = yes
	title = eldar_evt.10.title
	desc = eldar_evt.10.desc
	picture = GFX_evt_shrouded_planet
	show_sound = pc_shroud_eaten
	trigger = {
		has_planet_flag = is_silfae_eldar_craftworld
		FROM = { is_country_type = shroud_spirits }
	}
	immediate = {
		remove_all_armies = yes
		remove_all_districts = yes
		remove_all_buildings = yes
		clear_deposits = yes
		clear_planet_modifiers = yes
		change_pc = pc_shrouded
	}
	option = {
		name = DOTDOTDOT
	}
}